
/*
Щоб додати документацію для вашого проекту, а також виправити помилки в документаційних тестах, ви можете виконати такі кроки.

1. Додайте документацію для функції add_two
Ось як повинні виглядати ваші коментарі:


/**
 * Додає два до переданого значення та повертає нове значення.
 *
 * # Приклад
 *
 * ```
 * let arg = 5;
 * let answer = my_crate::add_two(arg);
 *
 * assert_eq!(7, answer);
 * ```
 */
pub fn add_two(x: i32) -> i32 {
    x + 2
}
2. Додайте документацію для модуля та пакету
У вашому lib.rs:

//! # Документаційні коментарі
//!
//! Бібліотека для демонстрації використання документаційних коментарів

pub mod compute;
У новому файлі src/compute.rs:

//! Модуль для виконання складних арифметичних операцій, які ви не можете виконати самостійно.
3. Додайте функцію add_one з документацією
Припустимо, у вас є функція add_one, ви можете також додати коментарі до неї:

/**
 * Додає один до переданого значення.
 *
 * # Приклад
 *
 * ```
 * let arg = 3;
 * let answer = my_crate::add_one(arg);
 *
 * assert_eq!(4, answer);
 * ```
 */
pub fn add_one(x: i32) -> i32 {
    x + 1
}
4. Запустіть тестування документації
Щоб запустити тести документації, використовуйте:

cargo test --doc
5. Результати тестування
Якщо все зроблено правильно, ви повинні побачити результат:

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

   Doc-tests doc-comments

running 2 tests
test src/lib.rs - add_one (line 11) ... ok
test src/lib.rs - add_two (line 26) ... ok

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.55s

Цей процес забезпечить належну документацію для вашого пакета, включаючи документацію для функцій,
модуля та самого пакета, а також надасть можливість перевіряти документаційні тести.
*/



